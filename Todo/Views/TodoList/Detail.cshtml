@using Microsoft.AspNetCore.Identity
@using Todo.Data
@using Todo.Data.Entities
@using Todo.Views.TodoItem
@using Todo.Services
@model Todo.Models.TodoLists.TodoListDetailViewmodel

@{
    ViewData["Title"] = $"List: {Model.Title}";
}

@inject ApplicationDbContext dbContext

<h2>@ViewData["Title"]</h2>

<div class="col-md-6">

    <label for="sortOrder">Sort by: </label>
    <select id="sortOrder">
        <option value="importance">Importance</option>
        <option value="rank">Rank</option>
    </select>

    <ul class="list-group">

        <li class="list-group-item">
            <form id="addItemForm">
                @Html.AntiForgeryToken()
                @Html.HiddenFor(m => m.TodoListId)
                @Html.Hidden("TodoListTitle", Model.Title, new { @id = "TodoListTitle" })
                <input type="text" id="Title" name="Title" placeholder="Item Name" required />
                @Html.DropDownList(
                         "Importance",
                         SelectListConvenience.ImportanceSelectListItems,
                         new { @class = "form-control", required = "required" }
                         )
                @Html.DropDownList(
                         "ResponsiblePartyId",
                         dbContext.UserSelectListItems(),
                         "Select Responsible Party",
                         new { @class = "form-control", required = "required" })
                <button type="submit">Add Item</button>
            </form>
        </li>

        <!-- client side sorting -->
        @foreach (var item in Model.Items.OrderBy(x => x.Importance))
        {
            string contextualClass;
            switch (item.Importance)
            {
                case Importance.High:
                    contextualClass = "list-group-item-danger";
                    break;
                case Importance.Low:
                    contextualClass = "list-group-item-info";
                    break;
                default:
                    contextualClass = "";
                    break;
            }

            <li class="item list-group-item @contextualClass" data-visible="@(!item.IsDone)" data-id="@item.TodoItemId"
                data-importance="@item.Importance" data-rank="@item.Rank">

                <div class="row">

                    <div class="col-md-6">
                        <a asp-action="Edit" asp-controller="TodoItem" asp-route-todoItemId="@item.TodoItemId">

                            @if (item.IsDone)
                            {
                                <s>@item.Title</s>
                            }
                            else
                            {
                                <text>@item.Title</text>
                            }
                        </a>
                    </div>

                    <div class="col-md-2">
                        <text>@item.Rank</text>
                    </div>

                    <div class="col-md-4 text-right">
                        <small>
                            @item.ResponsibleParty.UserName

                            <img
                                src="https://www.gravatar.com/avatar/@Gravatar.GetHash(item.ResponsibleParty.Email)?s=30" />

                        </small>
                    </div>
                </div>

            </li>
        }
    </ul>
    <div class="text-right">
        <text>Hide done</text>

        <input type="checkbox" id="toggleVisibilityCheckbox" />
    </div>
    <h3>Add New Item</h3>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            $('#toggleVisibilityCheckbox').change(function () {
                console.log('toggleVisibilityCheckbox change')
                if ($(this).is(':checked')) {
                    $('.list-group-item[data-visible="False"]').hide();
                } else {
                    $('.list-group-item[data-visible="False"]').show();
                }
            });
        });

        $(document).ready(function () {
            $('#sortOrder').change(function () {
                var sortBy = $(this).val();
                var items = $('.list-group .item');

                items.sort(function (a, b) {
                    if (sortBy === 'importance') {
                        var importanceDiff = $(a).data('importance') - $(b).data('importance');
                        if (importanceDiff === 0) {
                            return $(a).data('rank') - $(b).data('rank');
                        }
                        return importanceDiff;
                    } else if (sortBy === 'rank') {
                        var rankDiff = $(a).data('rank') - $(b).data('rank');
                        if (rankDiff === 0) {
                            return $(a).data('importance') - $(b).data('importance');
                        }
                        return rankDiff;
                    }
                });

                $('.list-group').empty().append(items);
            });
        });

        $(document).ready(function () {
            $('#addItemForm').on('submit', function (e) {
                e.preventDefault();
                var posting = $.post('@Url.Action("Create", "TodoItem")', $('#addItemForm').serialize());

                posting.done(function (data) {
                    location.reload();
                });
            });
        });

    </script>
}